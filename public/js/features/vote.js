// Feature: voting
(function(global){ const PP=global.PlanningPoker=global.PlanningPoker||{}; const { state, StorageManager, UI, Statistics, refs }=PP; let socket=null; PP.setSocketForVote=s=>{socket=s;}; PP.VoteManager={ loadCards(){ if(!refs.cardsContainer)return; fetch('/api/fibonacci').then(r=>r.json()).then(d=>this.renderCards(d.values)).catch(()=>UI.toast('Failed to load cards','error')); }, renderCards(values){ refs.cardsContainer.innerHTML=''; values.forEach(val=>{ const card=document.createElement('div'); card.className='card'; card.dataset.value=val; card.textContent=val; if(state.selectedValue!==null&&state.selectedValue===val) card.classList.add('selected'); card.addEventListener('click',()=>this.selectValue(val)); if(state.revealed) card.classList.add('disabled'); refs.cardsContainer.appendChild(card); }); }, selectValue(val){ if(state.revealed)return; state.selectedValue=val; UI.clearCardSelection(); const el=document.querySelector(`.card[data-value="${val}"]`); el&&el.classList.add('selected'); socket&&socket.emit('vote',{sessionId:state.sessionId,clientId:state.clientId,value:val}); StorageManager.saveVote(state.sessionId,state.roundId,val); }, restoreVote(){ const stored=StorageManager.getVote(state.sessionId,state.roundId); if(stored!==null){ state.selectedValue=stored; UI.restoreSelection(); socket&&socket.emit('vote',{sessionId:state.sessionId,clientId:state.clientId,value:stored}); } }, renderResults({revealed,votes,sessionName,roundId,consensus}){ state.revealed=revealed; if(sessionName&&sessionName!==state.sessionName){ state.sessionName=sessionName; UI.updateSessionHeader(); } if(roundId&&roundId!==state.roundId){ state.roundId=roundId; state.selectedValue=null; state.revealed=false; UI.clearCardSelection(); } if(revealed){ document.querySelectorAll('.card').forEach(c=>c.classList.add('disabled')); } else { document.querySelectorAll('.card.disabled').forEach(c=>c.classList.remove('disabled')); } if(!refs.resultsEl)return; refs.resultsEl.innerHTML=''; let banner=document.getElementById('consensusBanner'); if(!banner){ banner=document.createElement('div'); banner.id='consensusBanner'; banner.className='consensus-banner hidden'; refs.resultsEl.parentElement&&refs.resultsEl.parentElement.insertBefore(banner,refs.resultsEl); } if(revealed&&consensus!==null){ banner.textContent=`Consensus reached: ${consensus}`; banner.classList.remove('hidden'); } else { banner.classList.add('hidden'); } if(refs.statisticsEl){ if(revealed){ const stats=Statistics.fromVotes(votes); if(stats){ refs.statisticsEl.innerHTML=`<div class="stat-card"><i class="fas fa-arrow-down"></i><div><div class="stat-label">Min</div><div class="stat-value">${stats.min}</div></div></div><div class="stat-card"><i class="fas fa-chart-line"></i><div><div class="stat-label">Avg</div><div class="stat-value">${stats.avg}</div></div></div><div class="stat-card"><i class="fas fa-arrow-up"></i><div><div class="stat-label">Max</div><div class="stat-value">${stats.max}</div></div></div><div class="stat-card"><i class="fas fa-users"></i><div><div class="stat-label">Votes</div><div class="stat-value">${stats.count}</div></div></div>`; refs.statisticsEl.classList.remove('hidden'); } } else { refs.statisticsEl.classList.add('hidden'); } } Object.entries(votes).forEach(([id,data])=>{ const item=document.createElement('div'); item.className='result-item'; const userDiv=document.createElement('div'); userDiv.className='result-user'; userDiv.innerHTML=`<i class="fas fa-user"></i> ${data.displayName}`; const voteDiv=document.createElement('div'); voteDiv.className='result-vote'; if(revealed){ voteDiv.textContent=data.vote!==null?data.vote:'—'; voteDiv.classList.add('revealed'); } else { voteDiv.textContent=data.hasVoted?'✓':'—'; voteDiv.classList.add('pending'); } item.appendChild(userDiv); item.appendChild(voteDiv); refs.resultsEl.appendChild(item); }); } };})(window);

