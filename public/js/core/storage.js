// Core: storage manager
(function (global) { const PP = global.PlanningPoker = global.PlanningPoker || {}; const { state, LS_KEYS } = PP; function generateClientId(){ let id; if(global.crypto&&typeof global.crypto.randomUUID==='function'){ id=global.crypto.randomUUID(); } else { id='xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,c=>{ const r=(Math.random()*16)|0; const v=c==='x'?r:(r&0x3)|0x8; return v.toString(16);}); } try{ localStorage.setItem(LS_KEYS.CLIENT_ID,id);}catch(_){} return id;} PP.StorageManager={ get(k){try{return localStorage.getItem(k);}catch(_){return null;}}, set(k,v){try{localStorage.setItem(k,v);}catch(_){}}, remove(k){try{localStorage.removeItem(k);}catch(_){}}, loadInitial(){ state.clientId=this.get(LS_KEYS.CLIENT_ID)||generateClientId(); state.displayName=this.get(LS_KEYS.DISPLAY_NAME)||''; state.sessionId=this.get(LS_KEYS.SESSION_ID)||null; state.sessionName=this.get(LS_KEYS.SESSION_NAME)||''; }, persistSession(){ if(!state.sessionId)return; this.set(LS_KEYS.SESSION_ID,state.sessionId); this.set(LS_KEYS.SESSION_NAME,state.sessionName); }, clearSession(){ this.remove(LS_KEYS.SESSION_ID); this.remove(LS_KEYS.SESSION_NAME); }, voteKey(s,r){return `vote_${s}_${r}`;}, saveVote(s,r,v){ if(!s||!r)return; const key=this.voteKey(s,r); if(v===null||v===undefined)this.remove(key); else this.set(key,String(v)); }, getVote(s,r){ if(!s||!r)return null; const raw=this.get(this.voteKey(s,r)); if(raw===null||raw==='null')return null; const num=parseInt(raw,10); return Number.isNaN(num)?null:num; } }; })(window);

