// App orchestrator (moved from root)
/* global io */
(function(){ const PP=window.PlanningPoker=window.PlanningPoker||{}; const { state, StorageManager, UI, VoteManager, SessionManager, LS_KEYS }=PP; function getQueryParam(n){ const p=new URLSearchParams(window.location.search); return p.get(n);} function ensureInviteLinkButton(){ const refs=PP.refs; if(!refs.copyInviteLinkBtn){ const container=document.querySelector('.session-id-container'); if(container){ const btn=document.createElement('button'); btn.id='copyInviteLinkBtn'; btn.className='icon-btn'; btn.title='Copy invite link'; btn.setAttribute('disabled','disabled'); btn.innerHTML='<i class="fas fa-link"></i>'; container.appendChild(btn); refs.copyInviteLinkBtn=btn; } } } function wireDomEvents(socket){ ensureInviteLinkButton(); const refs=PP.refs; if(refs.displayNameInput&&state.displayName) refs.displayNameInput.value=state.displayName; refs.createSessionBtn&&refs.createSessionBtn.addEventListener('click',()=>{ const name=refs.displayNameInput?refs.displayNameInput.value.trim():''; if(!name) return UI.toast('Please enter your display name','error'); state.displayName=name; StorageManager.set(LS_KEYS.DISPLAY_NAME,name); UI.showModal(refs.sessionNameModal); refs.sessionNameInput&&refs.sessionNameInput.focus(); }); refs.confirmSessionNameBtn&&refs.confirmSessionNameBtn.addEventListener('click',()=>{ const sessionName=(refs.sessionNameInput?refs.sessionNameInput.value.trim():'')||'Planning Session'; UI.hideModal(refs.sessionNameModal); SessionManager.create(sessionName); }); refs.sessionNameInput&&refs.sessionNameInput.addEventListener('keypress',e=>{ if(e.key==='Enter') refs.confirmSessionNameBtn&&refs.confirmSessionNameBtn.click(); }); refs.joinSessionBtn&&refs.joinSessionBtn.addEventListener('click',()=>{ const name=refs.displayNameInput?refs.displayNameInput.value.trim():''; const sessionId=refs.sessionIdInput?refs.sessionIdInput.value.trim():''; if(!name) return UI.toast('Please enter your display name','error'); if(!sessionId) return UI.toast('Please enter a session ID','error'); state.displayName=name; StorageManager.set(LS_KEYS.DISPLAY_NAME,name); SessionManager.join(sessionId); }); let editCallback=null; function showEditModal(title,current,cb){ const r=refs; if(!r.editNameModal)return; r.editModalTitle&&(r.editModalTitle.innerHTML=`<i class="fas fa-edit"></i> ${title}`); if(r.editNameInput){ r.editNameInput.value=current; r.editNameInput.focus(); r.editNameInput.select(); } editCallback=cb; UI.showModal(r.editNameModal);} refs.confirmEditBtn&&refs.confirmEditBtn.addEventListener('click',()=>{ const nv=refs.editNameInput?refs.editNameInput.value.trim():''; if(nv&&editCallback) editCallback(nv); UI.hideModal(refs.editNameModal); editCallback=null; }); refs.cancelEditBtn&&refs.cancelEditBtn.addEventListener('click',()=>{ UI.hideModal(refs.editNameModal); editCallback=null; }); refs.editNameInput&&refs.editNameInput.addEventListener('keypress',e=>{ if(e.key==='Enter') refs.confirmEditBtn&&refs.confirmEditBtn.click(); else if(e.key==='Escape') refs.cancelEditBtn&&refs.cancelEditBtn.click(); }); refs.editDisplayNameBtn&&refs.editDisplayNameBtn.addEventListener('click',()=>{ showEditModal('Edit Display Name',state.displayName,nv=>{ state.displayName=nv; StorageManager.set(LS_KEYS.DISPLAY_NAME,nv); UI.updateSessionHeader(); socket.emit('updateDisplayName',{ sessionId:state.sessionId, clientId:state.clientId, displayName:nv }); UI.toast('Display name updated'); }); }); refs.editSessionNameBtn&&refs.editSessionNameBtn.addEventListener('click',()=>{ showEditModal('Edit Session Name',state.sessionName,nv=>{ state.sessionName=nv; UI.updateSessionHeader(); socket.emit('updateSessionName',{ sessionId:state.sessionId, sessionName:nv }); UI.toast('Session name updated'); }); }); refs.copySessionIdBtn&&refs.copySessionIdBtn.addEventListener('click',()=>{ if(!state.sessionId) return UI.toast('No session ID','error'); navigator.clipboard.writeText(state.sessionId).then(()=>UI.toast('Session ID copied to clipboard')).catch(()=>UI.toast('Failed to copy session ID','error')); }); refs.copyInviteLinkBtn&&refs.copyInviteLinkBtn.addEventListener('click',()=>{ if(!state.sessionId) return UI.toast('Pas de session','error'); const link=`${window.location.origin}?session=${state.sessionId}`; navigator.clipboard.writeText(link).then(()=>UI.toast('Lien d\'invitation copié')).catch(()=>UI.toast('Échec de la copie du lien','error')); }); refs.revealBtn&&refs.revealBtn.addEventListener('click',()=>{ if(!state.joined) return UI.toast('Vous devez rejoindre la session avant de révéler','error'); socket.emit('reveal',{sessionId:state.sessionId}); }); refs.resetBtn&&refs.resetBtn.addEventListener('click',()=>{ if(!state.joined) return UI.toast('Vous devez rejoindre la session avant de réinitialiser','error'); state.selectedValue=null; StorageManager.saveVote(state.sessionId,state.roundId,null); socket.emit('reset',{sessionId:state.sessionId}); }); } function init(){ StorageManager.loadInitial(); const paramSession=getQueryParam('session'); if(paramSession&&(!state.sessionId||state.sessionId!==paramSession)){ state.sessionId=paramSession; } UI.updateSessionHeader(); const socket=io(); PP.setSocketForVote(socket); PP.setSocketForSession(socket); wireDomEvents(socket); SessionManager.registerEvents(); VoteManager.loadCards(); if(state.sessionId&&state.displayName){ SessionManager.join(state.sessionId); } else { if(paramSession&&PP.refs.sessionIdInput){ PP.refs.sessionIdInput.value=paramSession; } UI.showScreen(PP.refs.setupScreen); } } init();})();

